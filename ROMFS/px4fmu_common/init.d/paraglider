#!nsh
#
# PX4FMU CUSTOM startup script.

#
# Start CDC/ACM serial driver
#
if sercon
then
	echo "USB connected"
fi
usleep 5000
 
#
# Start the ORB (first app to start)
#
uorb start
usleep 5000
 
#
# Load parameters
#
set PARAM_FILE /fs/microsd/params
if mtd start
then
	set PARAM_FILE /fs/mtd_params
fi

param select $PARAM_FILE
if param load
then
	echo "[init] Parameters loaded: $PARAM_FILE"
else
	echo "[init] ERROR: Parameters loading failed: $PARAM_FILE"
fi
usleep 5000

#
# Set default values
#
set HIL no
set VEHICLE_TYPE fw
set MIXER none
set USE_IO yes
set OUTPUT_MODE none
set PWM_OUTPUTS none
set PWM_RATE none
set PWM_DISARMED none
set PWM_MIN none
set PWM_MAX none
set MKBLCTRL_MODE none
set FMU_MODE pwm
set MAV_TYPE none

set IO_PRESENT no
	
if [ $USE_IO == yes ]
then
	#
	# Check if PX4IO present and update firmware if needed
	#
	if [ -f /etc/extras/px4io-v2_default.bin ]
	then
		set IO_FILE /etc/extras/px4io-v2_default.bin
	else
		set IO_FILE /etc/extras/px4io-v1_default.bin
	fi
	
	if px4io checkcrc $IO_FILE
	then
		echo "[init] PX4IO CRC OK"
		echo "PX4IO CRC OK" >> $LOG_FILE

		set IO_PRESENT yes
	else
		echo "[init] Trying to update"
		echo "PX4IO Trying to update" >> $LOG_FILE
		
		tone_alarm MLL32CP8MB
		
		if px4io forceupdate 14662 $IO_FILE
		then
			usleep 500000
			if px4io checkcrc $IO_FILE
			then
				echo "[init] PX4IO CRC OK, update successful"
				echo "PX4IO CRC OK after updating" >> $LOG_FILE
				tone_alarm MLL8CDE

				set IO_PRESENT yes
			else
				echo "[init] ERROR: PX4IO update failed"
				echo "PX4IO update failed" >> $LOG_FILE
				tone_alarm $TUNE_OUT_ERROR
			fi
		else
			echo "[init] ERROR: PX4IO update failed"
			echo "PX4IO update failed" >> $LOG_FILE
			tone_alarm $TUNE_OUT_ERROR
		fi
	fi
	
	if [ $IO_PRESENT == no ]
	then
		echo "[init] ERROR: PX4IO not found"
		tone_alarm $TUNE_OUT_ERROR
	fi
fi
usleep 5000

#
# Set default output if not set
#
if [ $OUTPUT_MODE == none ]
then
	if [ $USE_IO == yes ]
	then
		set OUTPUT_MODE io
	else
		set OUTPUT_MODE fmu
	fi
fi
if [ $OUTPUT_MODE == io -a $IO_PRESENT != yes ]
then
	# Need IO for output but it not present, disable output
	set OUTPUT_MODE none
	echo "[init] ERROR: PX4IO not found, disabling output"
	
	# Avoid using ttyS0 for MAVLink on FMUv1
	if hw_ver compare PX4FMU_V1
	then
		set FMU_MODE serial
	fi
fi
usleep 5000

# 
# Try to get an USB console
#
nshterm /dev/ttyACM0 &
usleep 5000
usleep 5000

#
# Start the commander.
#
commander start
usleep 5000

#
# Start primary output
#
set TTYS1_BUSY no

# If OUTPUT_MODE == none then something is wrong with setup and we shouldn't try to enable output
if [ $OUTPUT_MODE != none ]
then
	if [ $OUTPUT_MODE == io ]
	then
		echo "[init] Use PX4IO PWM as primary output"
		if px4io start
		then
			echo "[init] PX4IO started"
			sh /etc/init.d/rc.io
		else
			echo "[init] ERROR: PX4IO start failed"
			tone_alarm $TUNE_OUT_ERROR
		fi
	fi
	if [ $OUTPUT_MODE == fmu ]
	then
		echo "[init] Use FMU PWM as primary output"
		if fmu mode_$FMU_MODE
		then
			echo "[init] FMU mode_$FMU_MODE started"
		else
			echo "[init] ERROR: FMU mode_$FMU_MODE start failed"
			tone_alarm $TUNE_OUT_ERROR
		fi
		
		if hw_ver compare PX4FMU_V1
		then
			if [ $FMU_MODE == pwm -o $FMU_MODE == gpio ]
			then
				set TTYS1_BUSY yes
			fi
			if [ $FMU_MODE == pwm_gpio ]
			then
				set TTYS1_BUSY yes
			fi
		fi
	fi
	if [ $OUTPUT_MODE == mkblctrl ]
	then
		echo "[init] Use MKBLCTRL as primary output"
		set MKBLCTRL_ARG ""
		if [ $MKBLCTRL_MODE == x ]
		then
			set MKBLCTRL_ARG "-mkmode x"
		fi
		if [ $MKBLCTRL_MODE == + ]
		then
			set MKBLCTRL_ARG "-mkmode +"
		fi
		
		if mkblctrl $MKBLCTRL_ARG
		then
			echo "[init] MKBLCTRL started"
		else
			echo "[init] ERROR: MKBLCTRL start failed"
			tone_alarm $TUNE_OUT_ERROR
		fi
		
	fi		
	if [ $OUTPUT_MODE == hil ]
	then
		echo "[init] Use HIL as primary output"
		if hil mode_pwm
		then
			echo "[init] HIL output started"
		else
			echo "[init] ERROR: HIL output start failed"
			tone_alarm $TUNE_OUT_ERROR
		fi
	fi
	
	#
	# Start IO or FMU for RC PPM input if needed
	#
	if [ $IO_PRESENT == yes ]
	then
		if [ $OUTPUT_MODE != io ]
		then
			if px4io start
			then
				echo "[init] PX4IO started"
				sh /etc/init.d/rc.io
			else
				echo "[init] ERROR: PX4IO start failed"
				tone_alarm $TUNE_OUT_ERROR
			fi
		fi
	else
		if [ $OUTPUT_MODE != fmu ]
		then
			if fmu mode_$FMU_MODE
			then
				echo "[init] FMU mode_$FMU_MODE started"
			else
				echo "[init] ERROR: FMU mode_$FMU_MODE start failed"
				tone_alarm $TUNE_OUT_ERROR
			fi

			if hw_ver compare PX4FMU_V1
			then
				if [ $FMU_MODE == pwm -o $FMU_MODE == gpio ]
				then
					set TTYS1_BUSY yes
				fi
				if [ $FMU_MODE == pwm_gpio ]
				then
					set TTYS1_BUSY yes
				fi
			fi
		fi
	fi
fi
usleep 5000

#
# MAVLink
#
set EXIT_ON_END no

if [ $HIL == yes ]
then
	sleep 1
	mavlink start -b 230400 -d /dev/ttyACM0 
	usleep 5000
else
	if [ $TTYS1_BUSY == yes ]
	then
		# Start MAVLink on ttyS0, because FMU ttyS1 pins configured as something else
		mavlink start -d /dev/ttyS0
		usleep 5000
		
		# Exit from nsh to free port for mavlink
		set EXIT_ON_END yes
	else
		# Start MAVLink on default port: ttyS1
		mavlink start
		usleep 5000
	fi
fi
usleep 5000

#
# Sensors
#
echo "[init] Start sensors"
sh /etc/init.d/rc.sensors
usleep 5000
 
#
# Start XSENS interface
#
xsens start
usleep 5000

#
# Start the attitude estimator or attitude position estimator
# Use attitude position estimator only if Xsens is connected
# This is the internal Kalman Filter of the PX4
#
#attitude_estimator_ekf start
#att_pos_estimator_ekf start
usleep 5000

#
# Set PWM values
#
pwm rate -a -r 70
pwm min -a -p 880
pwm max -a -p 2160
usleep 5000

#
# Load mixer
#
mixer load /dev/pwm_output /etc/mixers/IO_para.mix
usleep 5000

#
# Start position estimator
#
position_estimator_inav start
usleep 5000

#
# Start MAX127 ADC
# This is used to measure the relative angle between vehicle and paraglider
#
max127 start
usleep 5000

#
# Start controller
#
#fw_att_control start
twist_angle_control start
usleep 5000


 
#
# Start Data logging with ca 50Hz
#
sdlog3 start -r 55 -b 16 -a
usleep 5000



if [ $EXIT_ON_END == yes ]
then
	exit
fi